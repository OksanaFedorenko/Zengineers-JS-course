Локальные переменные для объекта.

-------------------Задание 1----------------------

Сумма через замыкание

Напишите функцию sum, которая работает так: sum(a)(b) = a+b.

Да, именно так, через двойные скобки (это не опечатка). Например:

sum(1)(2) = 3
sum(5)(-1) = 4

Ответ:  

 function sum(a) {
   return function (b) {
     return a + b;
   };
};

sum(1)(2);

Сначала вызовется функция sum(), в качестве результата вернется вложенная функция, 
которая и вызовется вторыми скобками. Вложенная функция делает непосредственно само сложение.
Через ссылку в своем свойстве [[Scope]] она будет иметь доступ к значению параметра а из
лексического окружения внешней функции sum() и вернет результат сложения параметров
внешней и вложенной функции.

-----------------Задание 2-----------------

Функция - строковый буфер

В некоторых языках программирования существует объект «строковый буфер», который аккумулирует внутри себя значения. Его функционал состоит из двух возможностей:

Добавить значение в буфер.
Получить текущее содержимое.
Задача – реализовать строковый буфер на функциях в JavaScript, со следующим синтаксисом:

Создание объекта: var buffer = makeBuffer();.
Вызов makeBuffer должен возвращать такую функцию buffer, которая при вызове buffer(value) добавляет значение в некоторое внутреннее хранилище, а при вызове без аргументов buffer() – возвращает его.
Вот пример работы:

function makeBuffer() { /* ваш код */ }

var buffer = makeBuffer();

// добавить значения к буферу
buffer('Замыкания');
buffer(' Использовать');
buffer(' Нужно!');

// получить текущее значение
alert( buffer() ); // Замыкания Использовать Нужно!
Буфер должен преобразовывать все данные к строковому типу:

var buffer = makeBuffer();
buffer(0);
buffer(1);
buffer(0);

alert( buffer() ); // '010'
Решение не должно использовать глобальные переменные.

Ответ: 

function makeBuffer() {
  var buff = '';
  
  function buffer(value) {
  if (arguments.length == 0) {
     return buff;
     } else {
       return buff += value;
     };
  };
return buffer;
};

var buffer = makeBuffer();

buffer('Замыкания');
buffer(' Использовать');
buffer(' Нужно!');

alert( buffer() );

При вызове функции makeBuffer() создается внутренний объект LexicalEnvironment, в нём создается
переменная buff, которой присваивается значение "", т.е. пустая строка. Вложенная функция
buffer() в зависимости от наличия или отсутствия у неё аргумента сохраняет этот аргумент в виде строки в переменную из замыкания buff или же возвращает текущее значение этой переменной. При каждом следующем вызове
функции buffer(value) она конкатенирует каждый новый аргумент с текущим значением переменной buff и 
сохраняет результат в эту же переменную (перезаписывает её). При вызове buffer() без аргумента
функция просто возвращает текущее значение переменной buff. 

-----------------Задание 3-----------------

Строковый буфер с очисткой

Добавьте буферу из решения задачи Функция - строковый буфер метод buffer.clear(), который будет очищать текущее содержимое буфера:

function makeBuffer() {
  ...ваш код...
}

var buffer = makeBuffer();

buffer("Тест");
buffer(" тебя не съест ");
alert( buffer() ); // Тест тебя не съест

buffer.clear();

alert( buffer() ); // ""

Ответ: 

function makeBuffer() {
  var buff = '';
  
  function buffer(value) {
  if (arguments.length == 0) {
     return buff;
     } else {
       return buff += value;
     };
  };

  buffer.clear = function() {
    buff = '';
  }

return buffer;
};

var buffer = makeBuffer();

buffer("Тест");
buffer(" тебя не съест ");
alert( buffer() );

buffer.clear();

alert( buffer() );

При вызове метода buffer.clear() происходит присваивание переменной buff пустой строки, таким образом очищая её.

--------------Задание 4---------------

var users = [{
  name: "Вася",
  surname: 'Иванов',
  age: 20
}, {
  name: "Петя",
  surname: 'Чапаев',
  age: 25
}, {
  name: "Маша",
  surname: 'Медведева',
  age: 18
}];

users.sort(byField('name'));
users.forEach(function(user) {
  alert( user.name );
}); // Вася, Маша, Петя

users.sort(byField('age'));
users.forEach(function(user) {
  alert( user.name );
}); // Маша, Вася, Петя

Напишите функцию byField(field), которую можно использовать в sort для сравнения 
объектов по полю field, чтобы пример выше заработал.

Ответ:  function byField(field) {
    return function(a, b) {
      return a[field] > b[field] ? 1 : -1;
    }
  }

Функция  byField() получает параметр field, он же "ключ", по которому будет производиться сортировка. 
В качестве результата функция byField() возвращает вложенную функцию с двумя параметрами, которая 
сравнивает их. Это нужно для того, чтобы метод sort не сравнивал значения поля field как строки.
Вложенная функция видит значение параметра field внешней функции через замыкание.

------------------Задание 5-----------------

Фильтрация через функцию

Создайте функцию filter(arr, func), которая получает массив arr и возвращает новый, в который входят только те элементы arr, для которых func возвращает true.
Создайте набор «готовых фильтров»: inBetween(a,b) – «между a,b», inArray([...]) – "в массиве [...]". Использование должно быть таким:
filter(arr, inBetween(3,6)) – выберет только числа от 3 до 6,
filter(arr, inArray([1,2,3])) – выберет только элементы, совпадающие с одним из значений массива.
Пример, как это должно работать:

/* .. ваш код для filter, inBetween, inArray */
var arr = [1, 2, 3, 4, 5, 6, 7];

alert(filter(arr, function(a) {
  return a % 2 == 0
})); // 2,4,6

alert( filter(arr, inBetween(3, 6)) ); // 3,4,5,6

alert( filter(arr, inArray([1, 2, 10])) ); // 1,2


Ответ: 
Функция фильтрации

 function filter(arr, func) {
  var result = [];

  for (var i = 0; i < arr.length; i++) {
    var val = arr[i];
    if (func(val)) {
      result.push(val);
    }
  }

  return result;
}

var arr = [1, 2, 3, 4, 5, 6, 7];

alert(filter(arr, function(a) {
  return a % 2 == 0;
})); 

Фильтр inBetween
 
function filter(arr, func) {
  var result = [];

  for (var i = 0; i < arr.length; i++) {
    var val = arr[i];
    if (func(val)) {
      result.push(val);
    }
  }

  return result;
}

function inBetween(a, b) {
    return function(x) {
      return x >= a && x <= b;
    };
  }


Фильтр inArray

var arr = [1, 2, 3, 4, 5, 6, 7];
alert( filter(arr, inBetween(3, 6)) );

function filter(arr, func) {
  var result = [];

  for (var i = 0; i < arr.length; i++) {
    var val = arr[i];
    if (func(val)) {
      result.push(val);
    }
  }

  return result;
}

function inArray(arr) {
    return function(x) {
      return arr.indexOf(x) != -1;
    };
  }

var arr = [1, 2, 3, 4, 5, 6, 7];
alert( filter(arr, inArray([1, 2, 10])) ); // 1,2

---------------Задание 6----------------

Армия функций

Следующий код создает массив функций-стрелков shooters. По замыслу, каждый стрелок должен выводить свой номер:

 function makeArmy() {

  var shooters = [];

  for (var i = 0; i < 10; i++) {
    var shooter = function() { // функция-стрелок
      alert( i ); // выводит свой номер
    };
    shooters.push(shooter);
  }

  return shooters;
}

var army = makeArmy();

army[0](); // стрелок выводит 10, а должен 0
army[5](); // стрелок выводит 10...
// .. все стрелки выводят 10 вместо 0,1,2...9
Почему все стрелки́ выводят одно и то же? Поправьте код, чтобы стрелки работали как задумано.

Ответ:   function makeArmy() {

  var shooters = [];

  for (let i = 0; i < 10; i++) {
    var shooter = function() {
      alert( i ); 
    };
    shooters.push(shooter);
  }

  return shooters;
}

var army = makeArmy();

army[0]();
army[5]();

При вызове функция shooter() начинает искать в своем лексическом окружении переменную i, чтобы вывести её.
Не найдя, ищет эту переменную в лексическом окружении функции makeArmy() и, обнаружив, выводит её
текущее значение, т.е. 10. Объявленная через var переменная i видна везде в функции makeArmy(), изменяется
в цикле и к моменту вызова функции  shooter() равна 10.
