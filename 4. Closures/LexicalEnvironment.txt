Замыкания, LexicalEnvironment

-- -- -- -- -- -- -- - Задание 1-- -- -- -- -- -- -- -- -

Что будет, если вызов say('Вася');
стоит в самом - самом начале, в первой строке кода ?


  say('Вася'); // Что выведет? Не будет ли ошибки?

var phrase = 'Привет';

function say(name) {
  alert(name + ", " + phrase);
}

Ответ: Выведется - Вася, undefined.  Выполнение скрипта состоит из двух фаз: сначала идет фаза инициализации,
т.е.скрипт "сканируется" на предмет Function Declaration и объявления переменных.В глобальном объекте
создаются свойства window = {say: function, phrase: undefined}. Во второй фазе выполняется сам скрипт -
сначала вызывается функция say и интерпретатор "перепрыгивает" через присвоение значения переменной phrase и
будет выполнять функцию say().С помощью alert() функция выведет окно со значениями параметра и переменной на момент вызова функции. После этого выполнение кода продолжится дальше и произойдет присваивание переменной phrase значения.

  -- -- -- -- -- -- -- --Задание 2-- -- -- -- -- -- -- -

  В какую переменную будет присвоено значение ? Каков будет результат выполнения этого кода ?

  var value = 0;
  function f() {
  if (1) {
    value = true;
  } else {
    var value = false;
  }

  alert(value);
}

f();

Изменится ли внешняя переменная value ?

  P.S.Какими будут ответы, если из строки var value = false убрать var ?

Ответ: На фазе инициализации будут созданы в глобальном объекте свойства window = {value: undefined, f: function}.
Затем начинается выполнение кода. Переменной value присваивается значение 0. Свойства глобального объекта
становятся window = {value: 0, f: function}. В момент вызова функции f() создается специальный внутренний
объект LexicalEnvironment(лексическое окружение), куда записываются переменные LexicalEnvironment = {value: undefined}.
Далее проверяется условие, и поскольку свойство f в глобальном объекте имеет значение function, то условие правдиво и выполняется присваивание value = true. Выполняя это присваивание функция сначала ищет переменную value в своем лексическом окружении, и найдя её делает присваивание. Глобальная же переменная value останется равна 0, что подтвердит вызов alert(value) вне функции.

П.С.Если из строки var value = false убрать var :

var value = 0;

function f() {
  if (1) {
    value = true;
  } else {
    value = false;
  }

  alert(value);
}

f();

то изменится глобальная переменная value. При вызове функции f() в её лексическом
окружении не будет создана переменная value(локальная переменная).Выполняя присваивание
value = true, функция не найдет в своем лексическом окружении переменной с таким
именем и будет искать её во внешнем объекте переменных по ссылке из своего внутреннего свойства[[Scope]].
Поэтому в данном случае функция будет менять глобальную переменную value.

  -- -- -- -- -- -- - Задание 3-- -- -- -- -- -- -

  Каков будет результат выполнения этого кода ? Почему ?

  function test() {

    alert(window);

    var window = 5;

    alert(window);
  }

test();

Ответ: В результате выполнения кода выведется undefined, затем 5. В момент вызова функции test()
создается специальный внутренний объект LexicalEnvironment, куда записываются переменные 
LexicalEnvironment = {window: undefined}. При первом вызове метода alert() выведется это самое
начальное значение переменной window - undefined. Затем выполнится присваивание переменной window
в лексическом окружении функции значения 5. При повторном вызове метода alert() выведется
текущее значение переменной, т.е. 5.

---------------Задание 4------------------

Каков будет результат выполнения кода? Почему?

var a = 5

(function() {
  alert(a)
})()
P.S. Подумайте хорошо! Здесь все ошибаются! P.P.S. Внимание, здесь подводный камень! Ок, вы предупреждены.

Ответ: Ошибка. Интерпретатор выведет сообщение, что  5 это не функция. Из-за отсутствия точки с запятой после
var=5, интерпретатор соединит весь код в одну строчку и поймет этот код как вызов функции с именем 5.

-----------------Задание 5-----------------

Если во внутренней функции есть своя переменная с именем currentCount – можно ли в ней получить currentCount из внешней функции?

function makeCounter() {
  var currentCount = 1;

  return function() {
    var currentCount;
    // можно ли здесь вывести currentCount из внешней функции (равный 1)?
  };
}

Ответ: Нельзя. Потому что при поиске переменной по имени функция ищет переменную сначала в своем локальном
лексическом окружении, и только не найдя ее там, ищет во внешнем окружении. В данном случае функция получит 
переменную из своего окружения и поиск не продолжится дальше.

----------------Задание 6----------------

Что выведут эти вызовы, если переменная currentCount находится вне makeCounter?

var currentCount = 1;

function makeCounter() {
  return function() {
    return currentCount++;
  };
}

var counter = makeCounter();
var counter2 = makeCounter();

alert( counter() ); // ?
alert( counter() ); // ?

alert( counter2() ); // ?
alert( counter2() ); // ?

Ответ: Последовательно выведутся числа: 1, 2, 3 и 4. При каждом запуске функции makeCounter()
её вложенная функция будет искать переменную currentCount, чтобы её изменить, сначала в своем
лексическом окружении, затем через ссылку в свойстве [[Scope]] в окружении функции makeCounter(), 
и не найдя её, поиск продолжится еще выше - в глобальном объекте window. Оба счетчика будут изменять
одну и ту же глобальную переменную currentCount. Для корректной работы каждого счетчика нужно 
поместить объявление переменной var currentCount = 1 внутрь функции makeCounter(). 

